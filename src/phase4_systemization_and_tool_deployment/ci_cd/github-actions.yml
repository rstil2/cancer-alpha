name: Cancer Alpha CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: cancer-alpha
  KUBERNETES_NAMESPACE: cancer-alpha

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/phase4_systemization_and_tool_deployment/deployment/docker/requirements.txt
        pip install pytest pytest-cov black flake8 mypy
    
    - name: Install Node dependencies
      run: |
        cd src/phase4_systemization_and_tool_deployment/web_app
        npm ci
    
    - name: Run Python linting
      run: |
        black --check src/
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
        mypy src/ --ignore-missing-imports
    
    - name: Run Python tests
      run: |
        pytest src/ --cov=src --cov-report=xml
    
    - name: Run Node.js linting
      run: |
        cd src/phase4_systemization_and_tool_deployment/web_app
        npm run lint
    
    - name: Run Node.js tests
      run: |
        cd src/phase4_systemization_and_tool_deployment/web_app
        npm test -- --coverage --watchAll=false
    
    - name: Build React app
      run: |
        cd src/phase4_systemization_and_tool_deployment/web_app
        npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels)
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (tags, labels)
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/phase4_systemization_and_tool_deployment/deployment/docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/phase4_systemization_and_tool_deployment/deployment/docker/Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: [build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Kubernetes context
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        export IMAGE_TAG=${{ github.sha }}
        
        # Update image tags in deployment files
        sed -i 's|cancer-alpha/api:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:${{ github.sha }}|' src/phase4_systemization_and_tool_deployment/deployment/kubernetes/api-deployment.yaml
        sed -i 's|cancer-alpha/web:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/web:${{ github.sha }}|' src/phase4_systemization_and_tool_deployment/deployment/kubernetes/web-deployment.yaml
        
        # Deploy to staging namespace
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/namespace.yaml
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/api-deployment.yaml
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/web-deployment.yaml
        
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/cancer-alpha-api -n cancer-alpha
        kubectl wait --for=condition=available --timeout=300s deployment/cancer-alpha-web -n cancer-alpha
        
        echo "Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    needs: [build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Kubernetes context
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        export IMAGE_TAG=${{ github.sha }}
        
        # Update image tags in deployment files
        sed -i 's|cancer-alpha/api:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:${{ github.sha }}|' src/phase4_systemization_and_tool_deployment/deployment/kubernetes/api-deployment.yaml
        sed -i 's|cancer-alpha/web:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/web:${{ github.sha }}|' src/phase4_systemization_and_tool_deployment/deployment/kubernetes/web-deployment.yaml
        
        # Deploy to production namespace
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/namespace.yaml
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/api-deployment.yaml
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/web-deployment.yaml
        kubectl apply -f src/phase4_systemization_and_tool_deployment/deployment/kubernetes/ingress.yaml
        
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/cancer-alpha-api -n cancer-alpha
        kubectl wait --for=condition=available --timeout=300s deployment/cancer-alpha-web -n cancer-alpha
        
        echo "Production deployment completed successfully!"
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "üéâ Cancer Alpha v${{ github.sha }} deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "‚ùå Cancer Alpha v${{ github.sha }} deployment to production failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        # Install k6 for performance testing
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run performance tests (you would create k6 test scripts)
        echo "Performance testing would run here"
        # k6 run performance-tests.js
